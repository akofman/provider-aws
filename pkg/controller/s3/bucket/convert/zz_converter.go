// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package convert

import types "github.com/aws/aws-sdk-go-v2/service/s3/types"

type ConverterImpl struct{}

func (c *ConverterImpl) DeepCopyAWSLambdaFunctionConfiguration(source []types.LambdaFunctionConfiguration) []types.LambdaFunctionConfiguration {
	var typesLambdaFunctionConfigurationList []types.LambdaFunctionConfiguration
	if source != nil {
		typesLambdaFunctionConfigurationList = make([]types.LambdaFunctionConfiguration, len(source))
		for i := 0; i < len(source); i++ {
			typesLambdaFunctionConfigurationList[i] = c.typesLambdaFunctionConfigurationToTypesLambdaFunctionConfiguration(source[i])
		}
	}
	return typesLambdaFunctionConfigurationList
}
func (c *ConverterImpl) DeepCopyAWSQueueConfiguration(source []types.QueueConfiguration) []types.QueueConfiguration {
	var typesQueueConfigurationList []types.QueueConfiguration
	if source != nil {
		typesQueueConfigurationList = make([]types.QueueConfiguration, len(source))
		for i := 0; i < len(source); i++ {
			typesQueueConfigurationList[i] = c.typesQueueConfigurationToTypesQueueConfiguration(source[i])
		}
	}
	return typesQueueConfigurationList
}
func (c *ConverterImpl) DeepCopyAWSTopicConfiguration(source []types.TopicConfiguration) []types.TopicConfiguration {
	var typesTopicConfigurationList []types.TopicConfiguration
	if source != nil {
		typesTopicConfigurationList = make([]types.TopicConfiguration, len(source))
		for i := 0; i < len(source); i++ {
			typesTopicConfigurationList[i] = c.typesTopicConfigurationToTypesTopicConfiguration(source[i])
		}
	}
	return typesTopicConfigurationList
}
func (c *ConverterImpl) pTypesNotificationConfigurationFilterToPTypesNotificationConfigurationFilter(source *types.NotificationConfigurationFilter) *types.NotificationConfigurationFilter {
	var pTypesNotificationConfigurationFilter *types.NotificationConfigurationFilter
	if source != nil {
		var typesNotificationConfigurationFilter types.NotificationConfigurationFilter
		typesNotificationConfigurationFilter.Key = c.pTypesS3KeyFilterToPTypesS3KeyFilter((*source).Key)
		pTypesNotificationConfigurationFilter = &typesNotificationConfigurationFilter
	}
	return pTypesNotificationConfigurationFilter
}
func (c *ConverterImpl) pTypesS3KeyFilterToPTypesS3KeyFilter(source *types.S3KeyFilter) *types.S3KeyFilter {
	var pTypesS3KeyFilter *types.S3KeyFilter
	if source != nil {
		var typesS3KeyFilter types.S3KeyFilter
		if (*source).FilterRules != nil {
			typesS3KeyFilter.FilterRules = make([]types.FilterRule, len((*source).FilterRules))
			for i := 0; i < len((*source).FilterRules); i++ {
				typesS3KeyFilter.FilterRules[i] = c.typesFilterRuleToTypesFilterRule((*source).FilterRules[i])
			}
		}
		pTypesS3KeyFilter = &typesS3KeyFilter
	}
	return pTypesS3KeyFilter
}
func (c *ConverterImpl) typesFilterRuleToTypesFilterRule(source types.FilterRule) types.FilterRule {
	var typesFilterRule types.FilterRule
	typesFilterRule.Name = types.FilterRuleName(source.Name)
	if source.Value != nil {
		xstring := *source.Value
		typesFilterRule.Value = &xstring
	}
	return typesFilterRule
}
func (c *ConverterImpl) typesLambdaFunctionConfigurationToTypesLambdaFunctionConfiguration(source types.LambdaFunctionConfiguration) types.LambdaFunctionConfiguration {
	var typesLambdaFunctionConfiguration types.LambdaFunctionConfiguration
	if source.Events != nil {
		typesLambdaFunctionConfiguration.Events = make([]types.Event, len(source.Events))
		for i := 0; i < len(source.Events); i++ {
			typesLambdaFunctionConfiguration.Events[i] = types.Event(source.Events[i])
		}
	}
	if source.LambdaFunctionArn != nil {
		xstring := *source.LambdaFunctionArn
		typesLambdaFunctionConfiguration.LambdaFunctionArn = &xstring
	}
	typesLambdaFunctionConfiguration.Filter = c.pTypesNotificationConfigurationFilterToPTypesNotificationConfigurationFilter(source.Filter)
	if source.Id != nil {
		xstring2 := *source.Id
		typesLambdaFunctionConfiguration.Id = &xstring2
	}
	return typesLambdaFunctionConfiguration
}
func (c *ConverterImpl) typesQueueConfigurationToTypesQueueConfiguration(source types.QueueConfiguration) types.QueueConfiguration {
	var typesQueueConfiguration types.QueueConfiguration
	if source.Events != nil {
		typesQueueConfiguration.Events = make([]types.Event, len(source.Events))
		for i := 0; i < len(source.Events); i++ {
			typesQueueConfiguration.Events[i] = types.Event(source.Events[i])
		}
	}
	if source.QueueArn != nil {
		xstring := *source.QueueArn
		typesQueueConfiguration.QueueArn = &xstring
	}
	typesQueueConfiguration.Filter = c.pTypesNotificationConfigurationFilterToPTypesNotificationConfigurationFilter(source.Filter)
	if source.Id != nil {
		xstring2 := *source.Id
		typesQueueConfiguration.Id = &xstring2
	}
	return typesQueueConfiguration
}
func (c *ConverterImpl) typesTopicConfigurationToTypesTopicConfiguration(source types.TopicConfiguration) types.TopicConfiguration {
	var typesTopicConfiguration types.TopicConfiguration
	if source.Events != nil {
		typesTopicConfiguration.Events = make([]types.Event, len(source.Events))
		for i := 0; i < len(source.Events); i++ {
			typesTopicConfiguration.Events[i] = types.Event(source.Events[i])
		}
	}
	if source.TopicArn != nil {
		xstring := *source.TopicArn
		typesTopicConfiguration.TopicArn = &xstring
	}
	typesTopicConfiguration.Filter = c.pTypesNotificationConfigurationFilterToPTypesNotificationConfigurationFilter(source.Filter)
	if source.Id != nil {
		xstring2 := *source.Id
		typesTopicConfiguration.Id = &xstring2
	}
	return typesTopicConfiguration
}
